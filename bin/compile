#!/usr/bin/env bash
# bin/compile BUILD_DIR CACHE_DIR ENV_DIR

# This an amalgamation of:
#   https://github.com/emk/heroku-buildpack-rust
#   https://github.com/Hoverbear/heroku-buildpack-rust

set -e
set -o pipefail
set -u

log() {
    echo "-----> $1"
}

# Build related variables.
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# Load our configuration variables.
log "Loading configuration variables..."
. "$BUILD_DIR/RustConfig"

CARGO_BUILD_ARGS="${CARGO_BUILD_ARGS:---release}"

# Check our configuration options.
if [ -z ${VERSION+x} ]; then
  echo "failed: RustConfig must set VERSION to indicate the Rust version."
  exit 1
fi
if [ -z ${RUSTUP_URL+x} ]; then
  RUSTUP_URL="https://static.rust-lang.org/rustup.sh"
fi

# Notify users running old, unstable versions of Rust about how to deploy
# successfully.
if [ -n "${CARGO_URL-}" ] || [ ! -f "$BUILD_DIR/Cargo.toml" ]; then
  cat <<EOF

  To deploy a modern Rust app, make sure you have a Cargo.toml file, and that
  you do not define CARGO_URL or CARGO_VERSION in RustConfig.

failed: Outdated configuration or missing Cargo.toml.
EOF
  exit 1
fi

# Switch to our cache directory.
mkdir -p "$CACHE_DIR"
cd "$CACHE_DIR"

# Make sure we have the correct Rust binaries and set up PATH.
if [ -d rust-cache-$VERSION ]; then
  log "Using Rust version $VERSION."
else
  log "Downloading Rust install script for $VERSION from $RUSTUP_URL..."

  rm -f rust.tar.gz
  rm -rf rust-cache-*
  curl -o rustup.sh "$RUSTUP_URL"
  chmod +x rustup.sh

  log "Installing Rust binaries..."

  mkdir rust-cache-$VERSION
  ./rustup.sh --prefix=rust-cache-$VERSION -y --revision=$VERSION \
      --disable-sudo --disable-ldconfig
fi

RUST_PATH=`ls -1d "$2/rust-cache-$VERSION"`
if [ ! -x "$RUST_PATH/bin/rustc" ]; then
    echo "failed: Cannot find Rust binaries at $RUST_PATH/bin."
    exit 1
fi

PATH="$RUST_PATH/bin:$RUST_PATH/cargo/bin:$PATH"
LD_LIBRARY_PATH="$RUST_PATH/lib${LD_LIBRARY_PATH+:$LD_LIBRARY_PATH}"
export LD_LIBRARY_PATH

# Switch back into our main build area
cd "$BUILD_DIR"

if [[ ! -d "$CACHE_DIR/target" ]]; then
    log "No cached crates detected."
else
    log "Detected cached crates. Restoring..."
    mv "$CACHE_DIR/target" "$BUILD_DIR/target"
fi

# To debug git issues:
# export RUST_LOG="cargo::sources::git=debug"

# Build the Rust app
log "Compiling application..."
CARGO_HOME="$CACHE_DIR/cargo" cargo build $CARGO_BUILD_ARGS

log "Caching build artifacts..."
cp -r "$BUILD_DIR/target" "$CACHE_DIR/target"
